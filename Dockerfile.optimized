# Optimized Dockerfile for Dumee SAAS Platform
# Multi-stage build for minimal image size

# Stage 1: Dependencies
FROM node:22-alpine AS deps
WORKDIR /app

# Install system dependencies
RUN apk add --no-cache git python3 make g++

# Copy package files
COPY package*.json ./
COPY packages/*/package*.json ./packages/
COPY client/package*.json ./client/
COPY api/package*.json ./api/

# Install production dependencies only
RUN npm ci --only=production

# Stage 2: Builder
FROM node:22-alpine AS builder
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache git python3 make g++

# Copy package files
COPY package*.json ./
COPY packages/*/package*.json ./packages/
COPY client/package*.json ./client/
COPY api/package*.json ./api/

# Install all dependencies (including dev)
RUN npm ci

# Copy source code
COPY . .

# Build the application
RUN cd packages/data-provider && npm run build || true && \
    cd ../data-schemas && npm run build || true && \
    cd ../agents && npm run build || true && \
    cd ../api && npm run build || true && \
    cd ../../client && npm run build

# Stage 3: Production
FROM node:22-alpine AS production
WORKDIR /app

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S dumee -u 1001 -G nodejs

# Copy production dependencies
COPY --from=deps --chown=dumee:nodejs /app/node_modules ./node_modules
COPY --from=deps --chown=dumee:nodejs /app/packages/*/node_modules ./packages/*/node_modules
COPY --from=deps --chown=dumee:nodejs /app/client/node_modules ./client/node_modules
COPY --from=deps --chown=dumee:nodejs /app/api/node_modules ./api/node_modules

# Copy built application
COPY --from=builder --chown=dumee:nodejs /app/packages/*/dist ./packages/*/dist
COPY --from=builder --chown=dumee:nodejs /app/client/dist ./client/dist
COPY --from=builder --chown=dumee:nodejs /app/api ./api
COPY --chown=dumee:nodejs package*.json ./
COPY --chown=dumee:nodejs dumee.example.yaml ./
COPY --chown=dumee:nodejs .env.example ./

# Set environment
ENV NODE_ENV=production
ENV PORT=3080
ENV HOST=0.0.0.0

# Switch to non-root user
USER dumee

# Expose port
EXPOSE 3080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3080/health', (r) => r.statusCode === 200 ? process.exit(0) : process.exit(1))"

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "api/server/index.js"]